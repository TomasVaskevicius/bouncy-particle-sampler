#pragma once

#include "bouncy_particle_sampler/basic_bps.h"
#include "core/mcmc.h"

#include <functional>
#include <memory>
#include <vector>

namespace bps {
namespace analysis {

/**
 * A class for running multiple independent MCMC algorithms to generate
 * enough statistics for required analysis.
 */
template<typename FloatingPointType, int Dimensionality>
class ParallelMcmcRunner {

 public:

   /**
    * Runs the given BPS algorithm a specified number of times in parallel
    * and returns the generated samples.
    *
    * @param bpsFactory
    *   A factory function for generating independent instances of the BasicBps
    *   algorithm.
    * @param requiredTrajectoryLengths
    *   The required total trajectory length for each independent run.
    * @param numberOfRuns
    *   The number of independent runs.
    * @param numberOfThreads
    *   The number of threads to use.
    *
    * @return
    *   A vector of size numberOfRuns, where each element is a vector of samples
    *   generated by a particular independent run of the given algorithm.
    */
   static std::unique_ptr<std::vector<
            typename Mcmc<FloatingPointType, Dimensionality>::SampleOutput>>
     generateBpsSamples(
       const std::function<
           std::unique_ptr<BasicBps<FloatingPointType, Dimensionality>>
           (void)>& bpsFactory,
       FloatingPointType requiredTrajectoryLengths,
       int numberOfRuns,
       int numberOfThreads = 8);

};

}
}

#include "analysis/parallel_mcmc_runner.tcc"
